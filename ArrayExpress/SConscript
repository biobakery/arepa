Import('reponame')
import os, string
import repo_config as repoconfig

#--------------------------------------------------------------------------------------------------------------------#

def create_ids_array(filename):
	IDS_ARRAY = {}
	f=open(filename)
	titles= string.split(f.readline(), '\t') # titles
	index = []
	for i in range (len(titles)): 
		if (string.strip(titles[i]) == 'Array Design REF'):
			index.append(i)
			#break #  It is may be more then 1 
	lines = f.readlines()
	for line in lines:
		
		sl = string.split(line,'\t')
		for j in index:
			try:
				if (sl[j]==''): continue
				IDS_ARRAY[sl[j]] = 'true'
			except IndexError: 
				continue
	f.close()
	return IDS_ARRAY

def _run_subdirectories_(target, source, env, reponame = reponame): 
	SUBDIRS = map(lambda y: string.split(y,'/')[1], map(lambda x: string.strip(x),os.popen('cd ' + reponame + '&&' + 'find . -maxdepth 1 -type d -name \"E-*\"').readlines()))
	for subdir in SUBDIRS: 
		curd = subdir
		subdir  = reponame + '/' + subdir
		ID			= subdir 
		ID_TYPE		= string.split(ID,'-')[1]
		FILE_ZIP		= curd  + '.processed.1.zip'
		FILE_SDRF		= curd  + '.sdrf.txt'
		PROG_ZIP2DIRS		= reponame + '/zip2dirs.rb' 
		

		def _download_FILE_ZIP_(target, source, env, path2dwnld = ID_TYPE + '/' + curd + '/' + FILE_ZIP, currsubdir = ID): 
			os.popen('cd ' + currsubdir + ' && wget -N ' + repoconfig.arrayexpress.data_website[1] + path2dwnld)
			
		def _download_FILE_SDRF_(target, source, env, path2dwnld = ID_TYPE + '/' + curd + '/' + FILE_SDRF, currsubdir = ID): 
			os.popen('cd ' + currsubdir + ' && wget -N ' + repoconfig.arrayexpress.data_website[1]+path2dwnld )

		def _zip2dirs_(target, source, env, currsubdir = ID,FILE_ZIP = FILE_ZIP, FILE_SDRF = FILE_SDRF ,curd =curd ): 
			print source[0].get_abspath(), source[0].rstr()
			os.popen('cd ' + currsubdir + ' && ' + source[0].get_abspath() + ' ' + string.split(source[1].rstr(),'/')[-1:][0]+' '+ string.split(source[2].rstr(),'/')[-1:][0])  
			IDS_ARRAY = (create_ids_array(source[2].rstr())).keys()
			print IDS_ARRAY
			listd = os.listdir(currsubdir)
			flistd = filter(lambda x: x[:len(curd) + 1] == curd + '_', listd)
			subsubdirs = filter(lambda x: os.path.isdir(currsubdir+ '/' + x), flistd)
			sdrf_file = string.split(source[2].rstr(),'/')[-1:]
			#env.SConscript(reponame + '/SubSConscript', exports=['env','subsubdirs', 'currsubdir','IDS_ARRAY','sdrf_file','reponame'])
			
		#env.Command([subdir + '/' + FILE_ZIP, 'dwnld_FileZip_' + curd ], [], _download_FILE_ZIP_)   #TEMPORARY COMMENTED

		#env.Command([subdir + '/' + FILE_SDRF, 'dwnld_FileSdrf_' + curd ], [], _download_FILE_SDRF_)   #TEMPORARY COMMENTED
		
		#env.Command(['perform_zip2dir_' + curd ],[PROG_ZIP2DIRS, subdir + '/' + FILE_ZIP, subdir + '/' + FILE_SDRF ,\
		#		 'dwnld_FileZip_' + curd , 'dwnld_FileSdrf_' + curd ], _zip2dirs_)
		env.Command(['perform_zip2dir_' + curd ],[PROG_ZIP2DIRS, subdir + '/' + FILE_ZIP, subdir + '/' + FILE_SDRF], _zip2dirs_)



env = Environment() # imported from MainSConscript
env.Command(['run_subdirs'],[],_run_subdirectories_)


